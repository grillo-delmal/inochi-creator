# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Nightly

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:


permissions:
  contents: write

jobs:
  collect-sources:
    runs-on: ubuntu-latest
    outputs:
      same-sources: ${{ steps.cache.outputs.cache-hit }}

    steps:
    - name: Install dub and ldc
      uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-latest
        dub: latest

    - uses: actions/checkout@v4
      with:
        ref: 'ci_cd'

    - name: Download project maintained dependencies
      run: |
        mkdir -p ./deps
        pushd deps

        # Make the archive weight less
        GIT_OPTIONS="--depth 1 --recurse-submodules --shallow-submodules" 

        # Fixme Use v0_8 branch until v9 is usable
        git clone $GIT_OPTIONS https://github.com/Inochi2D/inochi2d.git -b v0_8
        git clone $GIT_OPTIONS https://github.com/Inochi2D/facetrack-d.git
        git clone $GIT_OPTIONS https://github.com/Inochi2D/vmc-d.git
        # Lock inmath to v1.0.6 for now ;9
        git clone $GIT_OPTIONS https://github.com/Inochi2D/inmath.git -b v1.0.6
        git clone              https://github.com/Inochi2D/psd-d.git
        git clone $GIT_OPTIONS https://github.com/Inochi2D/fghj.git
        git clone              https://github.com/Inochi2D/i2d-imgui.git --recurse-submodules
        git clone $GIT_OPTIONS https://github.com/Inochi2D/i2d-opengl.git
        git clone $GIT_OPTIONS https://github.com/Inochi2D/dportals.git
        git clone              https://github.com/Inochi2D/kra-d.git
        git clone $GIT_OPTIONS https://github.com/Inochi2D/gitver.git
        git clone $GIT_OPTIONS https://github.com/dcarp/semver.git
        popd

    - name: Add dependencies to dub local cache
      run: |
        set -x
        # Add dependencies to user environment
        mkdir -p ./.dub/packages
        for d in ./deps/*/ ; do
            dub add-local $d
        done

        # Move local-packages.json to local environment
        #mv ~/.dub/packages/local-packages.json ./.dub/packages/

        #for d in ./deps/*/ ; do
        #    n=$(basename $d)
        #    mv ./.dub/packages/local-packages.json ./.dub/packages/local-packages.json.bak 
        #    jq --arg n $n --arg d $d '[ .[] | if .name | test($n) then .path = $d else . end ]' \
        #        ./.dub/packages/local-packages.json.bak > \
        #        ./.dub/packages/local-packages.json 
        #    rm -f ./.dub/packages/local-packages.json.bak
        #done
        dub --version
        pwd
        ls -alh
        dub list

    - name: Download external dependencies
      run: |
        # Download dependencies and generate the dub.selections.json file in the process
        dub build  \
            --compiler=ldc2 --build=release --config=linux-full \
            --vverbose \
            --cache=local
        
        dub list | tail -n+2 | head -n-2 | sort > current-versions

    - name: Check if it's different from last build
      uses: actions/cache@v4
      id: cache
      with:
        path: nightly-versions
        key: nightly-deps-${{ hashFiles('./current-versions') }}
        lookup-only: true

    - name: Download external dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        mv current-versions nightly-versions

    - name: Upload source
      if: steps.cache.outputs.cache-hit != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: inochi-creator-source
        path: ./*
        retention-days: 1

  build-resources:
    runs-on: ubuntu-20.04
    
    needs: [collect-sources]
    if: needs.collect-sources.outputs.same-sources != 'true'

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-creator-source
        path: '.'
    
    - name: 'Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install gettext
        mkdir out/

    - name: 'Generate i18n'
      run: |
        # Build translations
        mkdir otl/
        
        sudo chmod +x ./gentl.sh
        ./gentl.sh

        cp out/* otl/

    - name: Make Artifact
      uses: actions/upload-artifact@v3
      with:
        name: translations
        path: otl/*
        retention-days: 1

  linux-zip:
    runs-on: ubuntu-20.04

    needs: [collect-sources]
    if: needs.collect-sources.outputs.same-sources != 'true'

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-creator-source
        path: '.'

    - name: Install dub and ldc
      uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-latest
    
    - name: "Get build dependencies"
      run: |
        sudo apt install libsdl2-dev libfreetype6-dev gettext

    - name: 'Generate i18n'
      run: |
        sudo chmod +x ./gentl.sh
        ./gentl.sh
      
    - name: 'Build Inochi Creator'
      run: |
        # Build metadata (like version information and icons)
        dub build --skip-registry=all --cache=local --config=meta

        # Build the project, with its main file included, without unittests
        dub build --skip-registry=all --cache=local --compiler=ldc2 --config=linux-nightly --debug=InExperimental
          
    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'inochi-creator-linux-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: |
          out/inochi-creator-linux-x86_64.zip
        generate_release_notes: true

  windows:
    runs-on: windows-latest
    needs: build-resources

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-creator-source
        path: '.'

    - name: Install dub and ldc
      uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-latest

    - name: Download translations
      uses: actions/download-artifact@v3
      with:
        name: translations
        path: out/i18n/
      
    - name: 'Build Inochi Creator'
      run: |
        function Invoke-VSDevEnvironment {
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            $installationPath = & $vswhere -prerelease -legacy -latest -property installationPath
            $Command = Join-Path $installationPath "Common7\Tools\vsdevcmd.bat"
          & "${env:COMSPEC}" /s /c "`"$Command`" -no_logo && set" | Foreach-Object {
                if ($_ -match '^([^=]+)=(.*)') {
                    [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
                }
            }
        }
        Invoke-VSDevEnvironment
        Remove-Item 'C:/Strawberry' -Recurse

        # Build metadata (like version information and icons)
        dub build --skip-registry=all --cache=local --config=meta

        # Build the project, with its main file included, without unittests
        dub build --skip-registry=all --cache=local --compiler=ldc2 --config=win32-nightly --debug=InExperimental

    - name: Archive Zip
      uses: thedoctor0/zip-release@main
      with:
        type: 'zip'
        filename: 'inochi-creator-win32-x86_64.zip'
        directory: 'out/'
        path: '*'

    - name: 'Add msbuild to PATH'
      uses: microsoft/setup-msbuild@v1.1
    
    - name: 'Build MSI'
      run: |
        cd build-aux/windows/wix

        # Install required dependency
        mkdir packages/
        nuget install WixToolset.UI.wixext -version 4.0.0 -OutputDirectory packages/

        # Build solution
        msbuild "Inochi Creator.sln" -property:Configuration=Release

        # Copy installer out
        mv "bin/Release/Inochi Creator.msi" "../../../out/inochi-creator-win32-x86_64.msi"
        cd ../../../

    - name: 'Release to nightly tag'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        files: |
          out/inochi-creator-win32-x86_64.msi
          out/inochi-creator-win32-x86_64.zip

  macOS-dmg:
    runs-on: macos-14

    needs: [collect-sources]
    if: needs.collect-sources.outputs.same-sources != 'true'

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-creator-source
        path: '.'

    - name: Install dub and ldc
      uses: dlang-community/setup-dlang@v2
      with:
        compiler: ldc-latest
    
    - name: "Prepare for DMG packing"
      continue-on-error: true
      run: |
        export HOMEBREW_NO_INSTALL_CLEANUP=1
        export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
        brew update
        brew install create-dmg gettext

    - name: "Remove conflicting brew packages"
      continue-on-error: true
      run: |
        # Remove conflicting brew items
        brew remove --ignore-dependencies libpng brotli harfbuzz

    - name: "Remove final conflicting files"
      continue-on-error: true
      run: |
        # Delete fake harfbuzz if need be
        if [ -f "/usr/local/lib/libharfbuzz.dylib" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.dylib
        fi

        # And the .a for it as well
        if [ -f "/usr/local/lib/libharfbuzz.a" ]; then
          sudo rm -r /usr/local/lib/libharfbuzz.a
        fi

    - name: 'Generate i18n'
      run: |
        sudo chmod +x ./gentl.sh
        ./gentl.sh
      
    - name: 'Build Inochi Creator'
      env:
        DFLAGS: "-g -force-dwarf-frame-section=false"
      run: |

        # Build metadata (like version information and icons)
        dub build --skip-registry=all --cache=local --config=meta

        # First build ARM64 version...
        echo "Building arm64 binary..."
        dub build --skip-registry=all --cache=local --config=osx-nightly --arch=arm64-apple-macos
        mv "out/Inochi Creator.app/Contents/MacOS/inochi-creator" "out/Inochi Creator.app/Contents/MacOS/inochi-creator-arm64"

        # Then the X86_64 version...
        echo "Building x86_64 binary..."
        dub build --skip-registry=all --cache=local --config=osx-nightly --arch=x86_64-apple-macos
        mv "out/Inochi Creator.app/Contents/MacOS/inochi-creator" "out/Inochi Creator.app/Contents/MacOS/inochi-creator-x86_64"

        # Glue them together with lipo
        echo "Gluing them together..."
        lipo "out/Inochi Creator.app/Contents/MacOS/inochi-creator-x86_64" "out/Inochi Creator.app/Contents/MacOS/inochi-creator-arm64" -output "out/Inochi Creator.app/Contents/MacOS/inochi-creator" -create

        # Print some nice info
        echo "Done!"
        lipo -info "out/Inochi Creator.app/Contents/MacOS/inochi-creator"

        # Cleanup and bundle
        echo "Cleaning up..."
        rm "out/Inochi Creator.app/Contents/MacOS/inochi-creator-x86_64" "out/Inochi Creator.app/Contents/MacOS/inochi-creator-arm64"
        ./build-aux/osx/osxbundle.sh

    - name: 'Build DMG'
      run: |
        ./build-aux/osx/gendmg.sh

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: 'out/Install_Inochi_Creator.dmg'

  build-flatpak:
    runs-on: ubuntu-latest

    needs: [collect-sources]
    if: needs.collect-sources.outputs.same-sources != 'true'

    container:
      image: bilelmoussaoui/flatpak-github-actions:freedesktop-22.08
      options: --privileged

    env:
      MANIFEST_PATH: build-aux/flatpak/nightly/com.inochi2d.inochi-creator.yml
      FLATPAK_BRANCH: nightly
      FLATPAK_BUILD_DIR: build-dir
      FLATPAK_BUILD_REPO: build-repo

    steps:
    - name: Download source
      continue-on-error: true
      uses: actions/download-artifact@v4
      with:
        name: inochi-creator-source
        path: '.'

    - name: Dump canonical manifest
      run: |
        set -e
        flatpak-builder --show-manifest ${MANIFEST_PATH} > canonical-manifest.json

    - name: Download flatpak SDK and sources
      run: |
        set -e
        flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --install-deps-from=flathub --install-deps-only --user /dev/null ${MANIFEST_PATH}
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --download-only /dev/null ${MANIFEST_PATH}

    - name: Prime cache
      uses: actions/cache@v3
      with:
        path: |
          .flatpak-builder/ccache
        key: flatpak-builder-${{ hashFiles('canonical-manifest.json') }}
        restore-keys: |
          flatpak-builder-

    - name: Build flatpak
      run: |
        set -e
        flatpak-builder --default-branch=${FLATPAK_BRANCH} --ccache --repo=${FLATPAK_BUILD_REPO} ${FLATPAK_BUILD_DIR} ${MANIFEST_PATH}

    - name: Upload flatpak repo
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.FLATPAK_BUILD_REPO }}
        path: |
          ${{ env.FLATPAK_BUILD_REPO }}
          !${{ env.FLATPAK_BUILD_REPO }}/.lock

  publish-flatpak-bundle:
    runs-on: ubuntu-latest
    needs: build-flatpak

    env:
      APP_ID: com.inochi2d.inochi-creator
      FLATPAK_BUNDLE: inochi-creator
      FLATPAK_BRANCH: nightly
      FLATPAK_BUILD_REPO: build-repo

    steps:
    - name: Install flatpak
      run: |
        set -e
        sudo apt install -y flatpak

    - name: Download flatpak repo
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.FLATPAK_BUILD_REPO }}

    - name: Create flatpak bundle
      run: |
        set -e
        mkdir -p ${FLATPAK_BUILD_REPO}/{extensions,refs/{mirrors,remotes},state,tmp/cache}
        flatpak build-bundle --runtime-repo=https://flathub.org/repo/flathub.flatpakrepo ${FLATPAK_BUILD_REPO} ${FLATPAK_BUNDLE}.flatpak ${APP_ID} ${FLATPAK_BRANCH}

    - name: Release to nightly tag
      uses: softprops/action-gh-release@v1
      with:
        name: 'Nightly Build'
        tag_name: nightly
        files: |
          ${{ env.FLATPAK_BUNDLE }}.flatpak

